# Project Memory

## üö´ CLI Tool Usage (When Using Bash)

**IMPORTANT**: Claude Code has built-in tools (Grep, Glob, Read) that are already optimized.
The rules below apply ONLY when Claude needs to use the Bash tool directly.

When using the Bash tool for operations:

**Directory Listing:**
- ‚úÖ ALWAYS: `eza -la --icons --git`
- ‚ùå NEVER: `ls -la` or `ls`

**Disk Usage:**
- ‚úÖ ALWAYS: `dust -d 2`
- ‚ùå NEVER: `du -sh` or `du`

**File Viewing (for display purposes):**
- ‚úÖ ALWAYS: `bat filename`
- ‚ùå NEVER: `cat filename`

**File Search (if not using Glob tool):**
- ‚úÖ ALWAYS: `fd pattern`
- ‚ùå NEVER: `find . -name pattern`

**Text Search (if not using Grep tool):**
- ‚úÖ ALWAYS: `rg pattern`
- ‚ùå NEVER: `grep pattern`

For complete modern CLI tools reference: @../steering.md

## Build & Development Commands

<!-- Language-specific commands will be added here -->
- Build: [TO_BE_CONFIGURED]
- Test: [TO_BE_CONFIGURED]
- Lint: [TO_BE_CONFIGURED]

## Code Style Guidelines

<!-- Project-specific style guidelines -->
- Follow language conventions
- Use consistent naming
- Keep functions small and focused
- Write self-documenting code

## Project Architecture

<!-- Describe your project structure -->
- Main source: src/
- Tests: tests/ or __tests__/
- Configuration: config/

## SDD Workflow

This project uses Spec-Driven Development (SDD) workflow:
- Use `/kiro:*` commands for structured development
- Follow Requirements ‚Üí Design ‚Üí Tasks ‚Üí Implementation
- Keep diffs small (< 200 lines per change)
- Always write tests for new features

## Development Workflow

1. Start with SDD: `/kiro:spec-init "feature name"`
2. Let code be reviewed by code-reviewer agent
3. Run tests before committing
4. Keep commits atomic and well-described

## Important Notes

<!-- Add project-specific important information -->
- [Add your project-specific guidelines here]
